name: Run Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  fast-tests:
    name: Fast Tests - Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        pip install -e .

    - name: Install and run pre-commit hooks
      uses: pre-commit/action@v3.0.1
      with:
        extra_args: --all-files

    - name: Check import boundaries
      run: |
        python scripts/check_imports.py

    - name: Check for singleton patterns
      run: |
        python scripts/detect_singletons.py src

    - name: Run unit tests
      run: |
        pytest tests/unit/ tests/core/ tests/adapters/ tests/planner/ tests/retrieval/ tests/tools/ tests/services/ tests/validator/ -v

    - name: Run critical integration tests
      run: |
        pytest tests/integration/test_service_interactions.py -v

    - name: Run security tests
      run: |
        pytest tests/security/ -v

  core-only-test:
    name: Core-Only Installation Test
    needs: fast-tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        cache: 'pip'

    - name: Install minimal dependencies
      run: |
        python -m pip install --upgrade pip
        # Install only the core package with no extras
        pip install -e .

    - name: Verify core functionality
      run: |
        # Create a simple test that only uses core functionality
        echo "
import sys
from saplings.core import ConfigValue, Config
from saplings.core.utils import count_tokens

# Test config functionality
config = Config({'test': 'value'})
assert config.get('test') == 'value'

# Test tokenizer utility
assert count_tokens('Hello world') > 0

print('Core functionality test passed!')
        " > core_test.py

        python core_test.py

  external-api-tests:
    name: External API Tests
    needs: fast-tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        pip install -e .

    - name: Run OpenAI API tests
      if: env.OPENAI_API_KEY != ''
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        pytest tests/integration/test_model_adapters.py::TestOpenAIIntegration -v

    - name: Run Anthropic API tests
      if: env.ANTHROPIC_API_KEY != ''
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        pytest tests/integration/test_model_adapters.py::TestAnthropicIntegration -v

    - name: Run FAISS tests
      run: |
        pip install faiss-cpu
        pytest tests/integration/test_faiss_integration.py -v

    - name: Run vLLM tests
      run: |
        pip install vllm
        pytest tests/integration/test_gasa_integration.py -v

  coverage:
    name: Test Coverage
    needs: fast-tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        pip install -e .

    - name: Run tests with coverage
      run: |
        pytest --cov=saplings --cov-report=xml tests/unit/ tests/core/ tests/adapters/ tests/planner/ tests/retrieval/ tests/tools/ tests/services/ tests/validator/ tests/security/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
