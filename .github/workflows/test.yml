name: Saplings Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  fast-tests:
    name: Fast Tests - Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        pip install -e .

    - name: Install and run pre-commit hooks
      uses: pre-commit/action@v3.0.1
      with:
        extra_args: --all-files

    - name: Check import boundaries
      run: |
        python scripts/check_imports.py

    - name: Check for singleton patterns
      run: |
        python scripts/detect_singletons.py src

    - name: Run unit tests
      run: |
        pytest tests/unit/ tests/core/ tests/adapters/ tests/planner/ tests/retrieval/ tests/tools/ tests/services/ tests/validator/ -v

    - name: Run critical integration tests
      run: |
        pytest tests/integration/test_self_healing_loop.py tests/integration/test_browser_tool_orchestration.py tests/integration/test_secure_hot_loading.py -v

  extended-tests:
    name: Extended Tests
    needs: fast-tests
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        pip install -e .

    - name: Run remaining integration tests
      run: |
        pytest tests/integration/ --ignore=tests/integration/test_self_healing_loop.py --ignore=tests/integration/test_browser_tool_orchestration.py --ignore=tests/integration/test_secure_hot_loading.py -v

    - name: Run end-to-end tests
      run: |
        pytest tests/end_to_end/ -v

  core-only-test:
    name: Core-Only Installation Test
    needs: fast-tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        cache: 'pip'

    - name: Install minimal dependencies
      run: |
        python -m pip install --upgrade pip
        # Install only the core package with no extras
        pip install -e .

    - name: Verify core functionality
      run: |
        # Create a simple test that only uses core functionality
        echo "
import sys
from saplings.core import ConfigValue, Config
from saplings.core.utils import count_tokens

# Test config functionality
config = Config({'test': 'value'})
assert config.get('test') == 'value'

# Test tokenizer utility
assert count_tokens('Hello world') > 0

print('Core functionality verified')
sys.exit(0)
        " > test_core_only.py

        # Run the test
        python test_core_only.py

  performance-tests:
    name: Performance Tests
    if: github.event_name == 'schedule' || github.event.inputs.run_performance == 'true'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        pip install -e .

    - name: Run performance tests
      run: |
        mkdir -p benchmark_results
        BENCHMARK_RESULTS_DIR=benchmark_results pytest tests/performance/ -v

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark_results/
