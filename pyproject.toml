[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[project]
name = "saplings"
version = "0.2.0"
description = "A graphs-first, self-improving agent framework"
authors = [
    {name = "Jacob Warren", email = "jacob.paul.warren@gmail.com"}
]
readme = "README.md"
license = {text = "MIT"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.10,<3.13"
dependencies = [
    "numpy>=1.24.0",
    "pydantic>=2.0.0",
    "networkx>=3.0",
    "requests>=2.28.0",
    "importlib-metadata>=6.0.0",
    "pandas>=2.0.0",
    "scipy>=1.10.0",
    "pyyaml>=6.0.0",
    "aiohttp>=3.8.0",
    "asyncio>=3.4.3",
    "beautifulsoup4>=4.13.4",
    "pypdf>=4.0.0",
    "arxiv>=2.0.0",
    "dependency-injector>=4.41.0",
    "punq>=0.6.0",
]

[project.urls]
Repository = "https://github.com/jacobwarren/saplings"
Documentation = "https://github.com/jacobwarren/saplings/docs"

[tool.poetry]
packages = [{include = "saplings", from = "src"}]

[project.optional-dependencies]
# Service-level extras
openai = ["openai>=1.0.0"]
anthropic = ["anthropic>=0.8.0"]
transformers = ["transformers>=4.30.0"]
torch = ["torch>=2.0.0"]
monitoring = []
langsmith = ["langsmith>=0.0.60"]
vllm = ["vllm>=0.8.5"]

# Retrieval extras
retrieval = ["scikit-learn>=1.2.0", "sentence-transformers>=2.2.2"]
optimized = ["torch>=2.0.0"]
faiss = ["faiss-cpu>=1.7.0"]

# Visualization extras
viz = ["matplotlib>=3.5.0", "plotly>=5.5.0"]

# Tool extras
tools = ["duckduckgo-search>=4.0.0", "markdownify>=0.11.0", "wikipedia-api>=0.6.0", "librosa>=0.10.0"]
browser = ["selenium>=4.10.0", "pillow>=9.0.0"]  # Allow higher versions for vllm compatibility
mcp = ["mcpadapt>=0.1.0"]
e2b = ["e2b>=0.9.0"]

# LoRA fine-tuning extras
lora = [
    "transformers>=4.30.0",
    "datasets>=2.13.0",
    "torch>=2.0.0",
    "peft>=0.5.0",
    "accelerate>=0.20.0",
    "bitsandbytes>=0.40.0",
    "apscheduler>=3.10.0"
]

# Grouped extras
services = [
    "openai>=1.0.0",
    "anthropic>=0.8.0",
    "transformers>=4.30.0",
    "torch>=2.0.0"
]

# Complete configurations
dev = [
    "pytest>=7.3.1",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.1",
    "pytest-timeout>=2.2.0",
    "black>=23.3.0",
    "isort>=5.12.0",
    "mypy>=1.10",
    "ruff>=0.4.0",
    "radon>=6.0",
    "pre-commit>=3.7",
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.2.1",
    "docker>=6.1.0",
    "pylint>=2.17.0"
]

test = [
    "pytest>=7.3.1",
    "pytest-cov>=4.1.0",
    "pytest-timeout>=2.2.0"
]

full = [
    # Services
    "openai>=1.0.0", "anthropic>=0.8.0", "transformers>=4.30.0", "torch>=2.0.0",
    # Monitoring
    "langsmith>=0.0.60",
    # LoRA
    "peft>=0.5.0", "accelerate>=0.20.0", "bitsandbytes>=0.40.0", "datasets>=2.13.0", "apscheduler>=3.10.0",
    # VLLM
    "vllm>=0.8.5",
    # Retrieval
    "scikit-learn>=1.2.0", "sentence-transformers>=2.2.2",
    # Visualization
    "matplotlib>=3.5.0", "plotly>=5.5.0",
    # Tools
    "duckduckgo-search>=4.0.0", "markdownify>=0.11.0", "wikipedia-api>=0.6.0", "librosa>=0.10.0",
    # Browser
    "selenium>=4.10.0", "pillow>=9.0.0",
    # MCP
    "mcpadapt>=0.1.0",
    # E2B
    "e2b>=0.9.0",
    # Optimized
    "faiss-cpu>=1.7.0"
]

all = ["saplings[full,dev]"]

# Poetry configuration for backward compatibility
[tool.poetry.dependencies]
python = ">=3.10,<3.13"

# Note: All dependencies are now defined in [project.dependencies] and [project.optional-dependencies]
# This section is kept minimal for backward compatibility with Poetry 1.x

[tool.black]
line-length = 100
target-version = ["py39"]

[tool.isort]
profile = "black"
line_length = 100

[tool.ruff]
# General configuration
line-length = 100
target-version = "py39"

[tool.ruff.lint]
# Rule selection
select = ["ALL"]
ignore = [
  "D203",  # conflicting docstring rules: one blank line before class docstring
  "D212",  # conflicting docstring rules: multi-line summary first line
  "E501",  # line length violations (handled by formatter)
  "UP037",  # line break before binary operator (modern style, was W503 in flake8)
  "COM812",  # trailing comma missing (conflicts with formatter)
]

# Per-file ignores
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports in __init__ files
"tests/**/*.py" = [
    "D",      # skip docstring checks in tests
    "S101",   # allow assert in tests
    "ANN001", # Missing type annotation for function argument
    "ANN201", # Missing return type annotation for public function
    "ANN202", # Missing return type annotation for private function
    "ANN204", # Missing return type annotation for special method
    "PLR2004", # Magic value used in comparison
    "S307",    # Use of possibly insecure function
    "PT011",   # pytest.raises() too broad
    "B017",    # Do not assert blind exception
    "INP001",  # Implicit namespace package
    "ARG002",  # Unused method argument
]
"src/**/*.py" = [
    "ARG002",  # Unused method argument in abstract methods and interfaces
]

# Import sorting
[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]
known-first-party = ["saplings"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

# Formatting
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.mypy]
python_version = "3.11"
disallow_untyped_defs = true
strict_optional = true
warn_unused_ignores = true
plugins = []
mypy_path = "src/saplings/typings"

# allow gradual opt-in:
[tool.mypy-per-module-options]
"src.saplings.*" = { strict = false }
"src.saplings.core.*" = { strict = true }

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
python_classes = "Test*"
addopts = "--timeout=60"

[tool.pytest.ini_options.markers]
nocov = "Skip coverage for this test"
benchmark = "Mark test as a benchmark test"
timeout = "Mark a test with a timeout in seconds"

[project.entry-points."saplings.model_adapters"]
vllm = "saplings.adapters.vllm_adapter:VLLMAdapter"
openai = "saplings.adapters.openai_adapter:OpenAIAdapter"
anthropic = "saplings.adapters.anthropic_adapter:AnthropicAdapter"
huggingface = "saplings.adapters.huggingface_adapter:HuggingFaceAdapter"

[project.entry-points."saplings.memory_stores"]
secure = "saplings.plugins.memory_stores:SecureMemoryStore"

[project.entry-points."saplings.validators"]
code = "saplings.plugins.validators:CodeValidator"
factual = "saplings.plugins.validators:FactualValidator"

[project.entry-points."saplings.indexers"]
code = "saplings.plugins.indexers:CodeIndexer"
