"""
Example of using the tool factory with sandbox execution and code signing.

This example demonstrates how to use the ToolFactory with sandbox execution
and code signing for secure tool generation and execution.
"""

import asyncio
import os
import tempfile
from saplings import (
    ToolFactory,
    ToolFactoryConfig,
    ToolTemplate,
    ToolSpecification,
    SecurityLevel,
    SandboxType,
    SigningLevel,
    LLM,
)
from saplings.tool_factory.code_signing import generate_key_pair


class MockLLM(LLM):
    """Mock LLM for demonstration purposes."""
    
    async def generate(self, prompt, **kwargs):
        """Generate text."""
        # For the multiply function, return a simple implementation
        if "multiply" in prompt.lower():
            return type("Response", (), {"text": "return a * b"})
        # For the add function, return a simple implementation
        elif "add" in prompt.lower():
            return type("Response", (), {"text": "return a + b"})
        # For the divide function, return a simple implementation
        elif "divide" in prompt.lower():
            return type("Response", (), {"text": "return a / b"})
        # Default response
        return type("Response", (), {"text": "return 'Hello, world!'"})
    
    async def generate_streaming(self, prompt, **kwargs):
        """Generate streaming text."""
        response = await self.generate(prompt, **kwargs)
        yield response.text
    
    def get_metadata(self):
        """Get metadata."""
        return {}
    
    def estimate_tokens(self, text):
        """Estimate tokens."""
        return len(text.split())
    
    def estimate_cost(self, prompt_tokens, completion_tokens):
        """Estimate cost."""
        return 0.0


async def run_sandbox_tool_example():
    """Run an example of the tool factory with sandbox execution and code signing."""
    print("=== Sandbox Tool Example ===")
    
    # Create a temporary directory for tools and keys
    temp_dir = tempfile.mkdtemp(prefix="saplings_sandbox_example_")
    tools_dir = os.path.join(temp_dir, "tools")
    keys_dir = os.path.join(temp_dir, "keys")
    os.makedirs(tools_dir, exist_ok=True)
    os.makedirs(keys_dir, exist_ok=True)
    
    try:
        # Generate a key pair for code signing
        private_key_path, public_key_path = generate_key_pair(keys_dir, "signing_key")
        print(f"Generated key pair:\n- Private key: {private_key_path}\n- Public key: {public_key_path}")
        
        # Create a mock LLM
        model = MockLLM()
        
        # Create a tool factory with sandbox execution and code signing
        config = ToolFactoryConfig(
            output_dir=tools_dir,
            security_level=SecurityLevel.HIGH,
            signing_level=SigningLevel.ADVANCED,
            signing_key_path=private_key_path,
            sandbox_type=SandboxType.DOCKER,  # Use Docker sandbox
        )
        
        try:
            tool_factory = ToolFactory(model=model, config=config)
            print("Created tool factory with sandbox execution and code signing")
        except Exception as e:
            print(f"Error creating tool factory: {e}")
            print("Falling back to local execution without sandbox")
            config.sandbox_type = SandboxType.NONE
            tool_factory = ToolFactory(model=model, config=config)
        
        # Register a template
        math_template = ToolTemplate(
            id="math_tool",
            name="Math Tool",
            description="A tool for mathematical operations",
            template_code="""
def {{function_name}}({{parameters}}):
    \"\"\"{{description}}\"\"\"
    {{code_body}}
""",
            required_parameters=["function_name", "parameters", "description", "code_body"],
            metadata={"category": "math"},
        )
        
        tool_factory.register_template(math_template)
        print("Registered math tool template")
        
        # Create a tool specification with LLM-generated code
        multiply_spec = ToolSpecification(
            id="multiply_numbers",
            name="Multiply Numbers",
            description="A tool to multiply two numbers",
            template_id="math_tool",
            parameters={
                "function_name": "multiply_numbers",
                "parameters": "a: int, b: int",
                "description": "Multiply two numbers together",
                # No code_body - will be generated by LLM
            },
            metadata={"category": "math"},
        )
        
        # Create the tool
        print("Creating multiply tool...")
        multiply_tool = await tool_factory.create_tool(multiply_spec)
        print(f"Created tool: {multiply_tool.name}")
        
        # Use the tool
        multiply_instance = multiply_tool()
        result = multiply_instance.execute(3, 4)
        print(f"3 * 4 = {result}")
        
        # Create another tool
        add_spec = ToolSpecification(
            id="add_numbers",
            name="Add Numbers",
            description="A tool to add two numbers",
            template_id="math_tool",
            parameters={
                "function_name": "add_numbers",
                "parameters": "a: int, b: int",
                "description": "Add two numbers together",
                # No code_body - will be generated by LLM
            },
            metadata={"category": "math"},
        )
        
        # Create the tool
        print("\nCreating add tool...")
        add_tool = await tool_factory.create_tool(add_spec)
        print(f"Created tool: {add_tool.name}")
        
        # Use the tool
        add_instance = add_tool()
        result = add_instance.execute(3, 4)
        print(f"3 + 4 = {result}")
        
        # List all tools
        print("\nRegistered tools:")
        tools = tool_factory.list_tools()
        for tool_id, tool_class in tools.items():
            print(f"- {tool_id}: {tool_class.name}")
        
        # Clean up
        tool_factory.cleanup()
        print("Cleaned up tool factory resources")
    
    finally:
        # Clean up temporary directory
        import shutil
        shutil.rmtree(temp_dir)
        print(f"Removed temporary directory: {temp_dir}")


if __name__ == "__main__":
    asyncio.run(run_sandbox_tool_example())
